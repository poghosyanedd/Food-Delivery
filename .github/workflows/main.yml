name: Build & Push (Matrix) to ECR

on:
  push:
    branches: [ "main" ]
    tags: [ "v*.*.*" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  packages: read

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
  REGISTRY: ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com

jobs:
  docker-build-and-push:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        service:
          - name: admin
            context: ./admin
            dockerfile: ./admin/Dockerfile
            repo: ${{ vars.ECR_ADMIN_REPO }}
          - name: backend
            context: ./backend
            dockerfile: ./backend/Dockerfile
            repo: ${{ vars.ECR_BACKEND_REPO }}
          - name: frontend
            context: ./frontend
            dockerfile: ./frontend/Dockerfile
            repo: ${{ vars.ECR_FRONTEND_REPO }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ matrix.service.repo }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=tag
            type=sha,format=short
            type=ref,event=branch

      # If you need build args per service, add conditionals here.
      # Example for backend only:
      # - name: Set backend build args
      #   if: matrix.service.name == 'backend'
      #   run: echo "BUILD_ARGS=--build-arg NODE_ENV=production" >> $GITHUB_ENV

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.service.context }}
          file: ${{ matrix.service.dockerfile }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # secrets: |
          #   "npm_token=${{ secrets.NPM_TOKEN }}"
          # build-args: ${{ env.BUILD_ARGS }}

      - name: Output image tags
        if: ${{ github.event_name != 'pull_request' }}
        run: echo "Pushed -> ${{ steps.meta.outputs.tags }}"
