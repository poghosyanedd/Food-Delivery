name: Build, Push to ECR & Deploy to EC2

on:
  push:
    branches: [ "main" ]
    tags: [ "v*.*.*" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  packages: read
  security-events: write

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
  REGISTRY: ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com

jobs:
  # Job 1: SonarCloud code analysis
  sonarcloud-analysis:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis
      
      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}


  # Job 2: Terraform provision ECR repositories and EC2
  terraform-provision:
    name: Terraform Provisioning
    runs-on: ubuntu-latest
    outputs:
      ec2_public_ip: ${{ steps.terraform-output.outputs.ec2_ip }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0
          terraform_wrapper: false
      
      - name: Terraform Format Check
        working-directory: ./terraform
        run: terraform fmt -check
        continue-on-error: true
      
      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init
      
      - name: Terraform Validate
        working-directory: ./terraform
        run: terraform validate
      
      - name: Setup SSH Keys from Secret
        run: |
          mkdir -p ~/.ssh
          
          # Write private key from secret
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Extract public key from private key
          ssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub
          chmod 644 ~/.ssh/id_rsa.pub
          
          echo "✅ SSH Keys prepared"
          echo "Public key fingerprint:"
          ssh-keygen -lf ~/.ssh/id_rsa.pub
      
      - name: Terraform Plan
        working-directory: ./terraform
        run: |
          terraform plan \
            -var="aws_account_id=${{ env.AWS_ACCOUNT_ID }}" \
            -var="ssh_public_key=$(cat ~/.ssh/id_rsa.pub)" \
            -out=tfplan
      
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
        working-directory: ./terraform
        run: terraform apply -auto-approve tfplan
      
      - name: Get Terraform Outputs
        if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
        id: terraform-output
        working-directory: ./terraform
        run: |
          EC2_IP=$(terraform output -raw instance_public_ip)
          echo "ec2_ip=$EC2_IP" >> $GITHUB_OUTPUT
          echo "### 🖥️ Infrastructure Provisioned" >> $GITHUB_STEP_SUMMARY
          echo "**EC2 Public IP:** $EC2_IP" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
      
      - name: Save Terraform outputs
        if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
        working-directory: ./terraform
        run: terraform output -json > ../terraform-outputs.json
      
      - name: Upload Terraform outputs
        if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs
          path: terraform-outputs.json
      
      - name: Upload SSH Private Key
        if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: ssh-key
          path: ~/.ssh/id_rsa
          retention-days: 1

  # Job 3: Build, scan, and push Docker images
  docker-build-and-push:
    name: Build & Push - ${{ matrix.service.name }}
    runs-on: ubuntu-latest
    needs: [sonarcloud-analysis, terraform-provision]
    strategy:
      fail-fast: false
      matrix:
        service:
          - name: admin
            context: ./admin
            dockerfile: ./admin/Dockerfile
            repo: ${{ vars.ECR_ADMIN_REPO }}
          - name: backend
            context: ./backend
            dockerfile: ./backend/Dockerfile
            repo: ${{ vars.ECR_BACKEND_REPO }}
          - name: frontend
            context: ./frontend
            dockerfile: ./frontend/Dockerfile
            repo: ${{ vars.ECR_FRONTEND_REPO }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ matrix.service.repo }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=tag
            type=sha,format=short
            type=ref,event=branch
            type=ref,event=pr
      
      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.service.context }}
          file: ${{ matrix.service.dockerfile }}
          push: false
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Get image name for scanning
        id: image
        run: |
          IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n 1)
          echo "tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.image.outputs.tag }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service.name }}.sarif'
          severity: 'CRITICAL,HIGH'
        continue-on-error: true
      
      - name: Check if SARIF file exists
        id: sarif-check
        run: |
          if [ -f "trivy-results-${{ matrix.service.name }}.sarif" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "✅ SARIF file generated successfully"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "⚠️ SARIF file was not generated"
          fi

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: steps.sarif-check.outputs.exists == 'true'
        with:
          sarif_file: 'trivy-results-${{ matrix.service.name }}.sarif'
          category: 'trivy-${{ matrix.service.name }}'
      
      - name: Run Trivy vulnerability scanner (Table output)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.image.outputs.tag }}
          format: 'table'
          severity: 'CRITICAL,HIGH'
      
      - name: Check Trivy scan results
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.image.outputs.tag }}
          format: 'json'
          output: 'trivy-results-${{ matrix.service.name }}.json'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
        continue-on-error: true
      
      - name: Push Docker image to ECR
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.service.context }}
          file: ${{ matrix.service.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
      
      - name: Output pushed image tags
        if: github.event_name != 'pull_request'
        run: |
          echo "### 🚀 Pushed Image Tags" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Service: **${{ matrix.service.name }}**" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
      
      - name: Upload Trivy JSON results as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-results-${{ matrix.service.name }}
          path: trivy-results-${{ matrix.service.name }}.json
          retention-days: 30

  # Job 4: Configure EC2 with Ansible
  ansible-configure:
    name: Configure EC2 with Ansible
    runs-on: ubuntu-latest
    needs: [terraform-provision, docker-build-and-push]
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible boto3 botocore
      
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Download SSH Key
        uses: actions/download-artifact@v4
        with:
          name: ssh-key
          path: ~/.ssh

      - name: Setup SSH Key
        run: |
          chmod 600 ~/.ssh/id_rsa
          
          cat >> ~/.ssh/config <<EOF
          Host *
            StrictHostKeyChecking no
            UserKnownHostsFile=/dev/null
            IdentityFile ~/.ssh/id_rsa
          EOF
          
          echo "✅ SSH key configured"
      
      - name: Download Terraform outputs
        uses: actions/download-artifact@v4
        with:
          name: terraform-outputs
      
      - name: Create Ansible inventory
        run: |
          EC2_IP="${{ needs.terraform-provision.outputs.ec2_public_ip }}"
          echo "Creating inventory with IP: $EC2_IP"
          
          mkdir -p ansible/inventory
          cat > ansible/inventory/hosts.ini <<EOF
          [web_servers]
          food-delivery-server ansible_host=$EC2_IP ansible_user=ubuntu ansible_ssh_private_key_file=~/.ssh/id_rsa

          [web_servers:vars]
          ansible_python_interpreter=/usr/bin/python3
          ansible_ssh_common_args='-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
          EOF
          
          cat ansible/inventory/hosts.ini
      
      - name: Wait for EC2 to be ready
        run: |
          EC2_IP="${{ needs.terraform-provision.outputs.ec2_public_ip }}"
          echo "Waiting for EC2 instance $EC2_IP to be ready..."
          
          for i in {1..30}; do
            if ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -o ConnectTimeout=5 ubuntu@$EC2_IP "echo 'SSH is ready'"; then
              echo "✅ Instance is ready!"
              exit 0
            fi
            echo "Attempt $i/30: Instance not ready yet, waiting 10s..."
            sleep 10
          done
          
          echo "❌ Instance did not become ready in time"
          exit 1
      
      - name: Test Ansible connectivity
        working-directory: ./ansible
        run: |
          ansible web_servers -m ping -i inventory/hosts.ini
      
      - name: Run Ansible playbook
        working-directory: ./ansible
        env:
          AWS_REGION: ${{ env.AWS_REGION }}
          AWS_ACCOUNT_ID: ${{ env.AWS_ACCOUNT_ID }}
          ECR_BACKEND_REPO: ${{ vars.ECR_BACKEND_REPO }}
          ECR_FRONTEND_REPO: ${{ vars.ECR_FRONTEND_REPO }}
          ECR_ADMIN_REPO: ${{ vars.ECR_ADMIN_REPO }}
        run: |
          ansible-playbook -i inventory/hosts.ini playbook.yml -v
      
      - name: Display configuration summary
        run: |
          EC2_IP="${{ needs.terraform-provision.outputs.ec2_public_ip }}"
          echo "### ✅ EC2 Configuration Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Instance IP:** $EC2_IP" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Installed:**" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Docker & Docker Compose" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Nginx reverse proxy" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ AWS CLI & ECR login configured" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Application directory created" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Docker Compose file generated" >> $GITHUB_STEP_SUMMARY

  # Job 5: Deploy application to EC2
  deploy-to-ec2:
    name: Deploy Application to EC2
    runs-on: ubuntu-latest
    needs: [terraform-provision, ansible-configure]
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Download SSH Key
        uses: actions/download-artifact@v4
        with:
          name: ssh-key
          path: ~/.ssh

      - name: Setup SSH Key
        run: |
          chmod 600 ~/.ssh/id_rsa
          echo "✅ SSH key configured"
      
      - name: Deploy application
        env:
          EC2_IP: ${{ needs.terraform-provision.outputs.ec2_public_ip }}
          REGISTRY: ${{ env.REGISTRY }}
          ECR_ADMIN_REPO: ${{ vars.ECR_ADMIN_REPO }}
          ECR_BACKEND_REPO: ${{ vars.ECR_BACKEND_REPO }}
          ECR_FRONTEND_REPO: ${{ vars.ECR_FRONTEND_REPO }}
        run: |
          echo "🚀 Deploying to EC2 instance: $EC2_IP"
          
          # Create deployment script that uses Docker Compose v2
          cat > deploy.sh <<'DEPLOY_SCRIPT'
          #!/bin/bash
          set -e
          
          cd /opt/food-delivery
          
          echo "📦 Logging into ECR..."
          aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${REGISTRY}
          
          echo "🔄 Pulling latest images from ECR..."
          docker pull ${REGISTRY}/${ECR_BACKEND_REPO}:latest || true
          docker pull ${REGISTRY}/${ECR_FRONTEND_REPO}:latest || true
          docker pull ${REGISTRY}/${ECR_ADMIN_REPO}:latest || true
          
          echo "🛑 Stopping existing containers..."
          docker compose down 2>/dev/null || /usr/local/bin/docker-compose down 2>/dev/null || true
          
          echo "🚀 Starting new containers with Docker Compose v2..."
          docker compose up -d
          
          echo "⏳ Waiting for containers to start..."
          sleep 15
          
          echo "✅ Checking container status..."
          docker compose ps
          
          echo "✅ Deployment complete!"
          DEPLOY_SCRIPT
          
          chmod +x deploy.sh
          
          # Copy deployment script to EC2
          echo "📤 Copying deployment script to EC2..."
          scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -o ServerAliveInterval=30 deploy.sh ubuntu@$EC2_IP:/tmp/deploy.sh
          
          # Execute deployment
          echo "🚀 Executing deployment..."
          ssh -i ~/.ssh/id_rsa \
              -o StrictHostKeyChecking=no \
              -o ServerAliveInterval=30 \
              -o ConnectTimeout=10 \
              ubuntu@$EC2_IP \
            "export AWS_REGION=$AWS_REGION && \
            export REGISTRY=$REGISTRY && \
            export ECR_BACKEND_REPO=$ECR_BACKEND_REPO && \
            export ECR_FRONTEND_REPO=$ECR_FRONTEND_REPO && \
            export ECR_ADMIN_REPO=$ECR_ADMIN_REPO && \
            bash /tmp/deploy.sh 2>&1 | tee /tmp/deployment.log"
          
          echo "✅ Deployment script executed successfully!"
      
      - name: Verify deployment
        env:
          EC2_IP: ${{ needs.terraform-provision.outputs.ec2_public_ip }}
        run: |
          echo "🔍 Verifying deployment on $EC2_IP..."
          
          # Check Docker status
          echo "🐳 Checking Docker containers..."
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ubuntu@$EC2_IP \
            "cd /opt/food-delivery && docker compose ps"
          
          # Check if containers are running
          RUNNING_COUNT=$(ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ubuntu@$EC2_IP \
            "cd /opt/food-delivery && docker compose ps --format json" | grep -c "running" || echo "0")
          
          echo "Running containers: $RUNNING_COUNT"
          
          if [ "$RUNNING_COUNT" -ge "3" ]; then
            echo "✅ At least 3 containers are running"
          else
            echo "⚠️ Less than 3 containers running, checking logs..."
            ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ubuntu@$EC2_IP \
              "cd /opt/food-delivery && docker compose logs --tail=100"
          fi
          
          # Check Nginx
          echo "🌐 Checking Nginx status..."
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ubuntu@$EC2_IP \
            "sudo systemctl is-active nginx"
          
          # Test health endpoint
          echo "🧪 Testing health endpoint..."
          sleep 5
          curl -f http://$EC2_IP/health || echo "Health check endpoint not responding yet"
          
          echo "### 🎉 Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Instance IP:** $EC2_IP" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Application URLs:**" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend: http://$EC2_IP" >> $GITHUB_STEP_SUMMARY
          echo "- Backend API: http://$EC2_IP/api" >> $GITHUB_STEP_SUMMARY
          echo "- Admin Panel: http://$EC2_IP/admin" >> $GITHUB_STEP_SUMMARY
          echo "- Health Check: http://$EC2_IP/health" >> $GITHUB_STEP_SUMMARY

  # Job 6: Summary report
  pipeline-summary:
    name: Pipeline Summary
    runs-on: ubuntu-latest
    needs: [sonarcloud-analysis, terraform-provision, docker-build-and-push, ansible-configure, deploy-to-ec2]
    if: always()
    steps:
      - name: Generate summary
        run: |
          echo "### 🎉 CI/CD Pipeline Completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Run ID:** ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Jobs Status:" >> $GITHUB_STEP_SUMMARY
          echo "- SonarCloud Analysis: **${{ needs.sonarcloud-analysis.result }}**" >> $GITHUB_STEP_SUMMARY
          echo "- Terraform Provision: **${{ needs.terraform-provision.result }}**" >> $GITHUB_STEP_SUMMARY
          echo "- Docker Build & Push: **${{ needs.docker-build-and-push.result }}**" >> $GITHUB_STEP_SUMMARY
          echo "- Ansible Configure: **${{ needs.ansible-configure.result }}**" >> $GITHUB_STEP_SUMMARY
          echo "- Deploy to EC2: **${{ needs.deploy-to-ec2.result }}**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Quick Links:" >> $GITHUB_STEP_SUMMARY
          echo "- [SonarCloud Dashboard](https://sonarcloud.io/project/overview?id=${{ github.repository_owner }}_${{ github.event.repository.name }})" >> $GITHUB_STEP_SUMMARY
          echo "- [GitHub Security](https://github.com/${{ github.repository }}/security/code-scanning)" >> $GITHUB_STEP_SUMMARY
          echo "- [ECR Console](https://${{ env.AWS_REGION }}.console.aws.amazon.com/ecr/repositories?region=${{ env.AWS_REGION }})" >> $GITHUB_STEP_SUMMARY
          echo "- [EC2 Console](https://${{ env.AWS_REGION }}.console.aws.amazon.com/ec2/home?region=${{ env.AWS_REGION }}#Instances:)" >> $GITHUB_STEP_SUMMARY